name: Build Sphinx Plugin

# Trigger the workflow on push or pull request,
# but only for the main branch
on:
    workflow_dispatch:
    
    push:
        branches:
            - master

env:
  QT_VERSION: 5.15.2
  QT_CREATOR_VERSION: 4.14.0
  QT_CREATOR_VERSION_HINT:
  QT_CREATOR_SNAPSHOT:
  PLUGIN_PRO: qtcreator-sphinx-plugin.pro
  PLUGIN_NAME: qtcreator-sphinx-plugin
  CMAKE_VERSION: 3.17.0
  NINJA_VERSION: 1.10.0

jobs:
  build:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }

    steps:
    - uses: actions/checkout@v2

    - name: Installing system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt install libgl1-mesa-dev
          )
        endif()

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(cmake_version "$ENV{CMAKE_VERSION}")
        set(ninja_version "$ENV{NINJA_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version $ENV{QT_VERSION})

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2019_64")
            set(qt_dir_prefix "${qt_version}/msvc2019_64")
          else()
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
          set(qt_dir_prefix "${qt_version}/clang_64")
        endif()

        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
          updates_xml_output "${updates_xml}")
        set(package_version ${CMAKE_MATCH_1})
        set(package_suffix ${CMAKE_MATCH_2})
        string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

        # Workaround for CMake's greedy regex
        if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
          string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
        endif()

        file(MAKE_DIRECTORY qt5)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
        message("::set-output name=qt_dir::${qt_dir}")
        message("::set-output name=qt_base_url::${qt_base_url}")
        message("::set-output name=qt_version::${qt_version}")

        foreach(package qtbase qtdeclarative qttools qtsvg qtxmlpatterns)
          file(DOWNLOAD
            "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
            SHOW_PROGRESS
          )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
        endforeach()

        file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

    - name: Download Qt Creator
      id: qt_creator
      shell: cmake -P {0}
      run: |
        string(REGEX MATCH "([0-9]+.[0-9]+).[0-9]+" outvar "$ENV{QT_CREATOR_VERSION}")

        set(qtc_base_url "https://download.qt.io/official_releases/qtcreator/${CMAKE_MATCH_1}/$ENV{QT_CREATOR_VERSION}/installer_source")
        set(qtc_snapshot "$ENV{QT_CREATOR_SNAPSHOT}")
        set(qtc_version_hint "$ENV{QT_CREATOR_VERSION_HINT}")
        if (qtc_snapshot)
          set(qtc_base_url "https://download.qt.io/snapshots/qtcreator/${CMAKE_MATCH_1}/$ENV{QT_CREATOR_VERSION}${qtc_version_hint}/installer_source/${qtc_snapshot}")
        endif()

        message("using qtc_base_url=${qtc_base_url}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(qtc_output_directory "qtcreator/lib/qtcreator/plugins")
          set(qtc_binary_name "$ENV{PLUGIN_NAME}.dll")
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(qtc_platform "windows_x64")
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(qtc_output_directory "qtcreator/lib/qtcreator/plugins")
          set(qtc_binary_name "lib$ENV{PLUGIN_NAME}.so")
          set(qtc_platform "linux_x64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(qtc_output_directory "qtcreator/bin/Qt Creator.app/Contents/PlugIns")
          set(qtc_binary_name "lib$ENV{PLUGIN_NAME}.dylib")
          set(qtc_platform "mac_x64")
        endif()

        # Save the path for other steps
        message("::set-output name=qtc_binary_name::${qtc_binary_name}")
        message("::set-output name=qtc_output_directory::${qtc_output_directory}")
        message("::set-output name=qtc_base_url::${qtc_base_url}")
        message("::set-output name=qtc_version::$ENV{QT_CREATOR_VERSION}${qtc_version_hint}")
        
        file(MAKE_DIRECTORY qtcreator)

        foreach(package qtcreator qtcreator_dev)
          message("start download of ${qtc_base_url}/${qtc_platform}/${package}.7z to ./${package}.7z")

          file(DOWNLOAD
            "${qtc_base_url}/${qtc_platform}/${package}.7z" ./${package}.7z SHOW_PROGRESS)
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qtcreator)
        endforeach()
        
        if ("${{ runner.os }}" STREQUAL "macOS")
          execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory qtcreator/bin
            COMMAND ${CMAKE_COMMAND} -E create_symlink
              "$ENV{GITHUB_WORKSPACE}/qtcreator/Qt Creator.app"
              "$ENV{GITHUB_WORKSPACE}/qtcreator/bin/Qt Creator.app"
          )
        endif()

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
        endif()

        set(ENV{Qt5_DIR} "${{ steps.qt.outputs.qt_dir }}" )

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
        endif()
        set(ENV{PATH} "${{ steps.cmake_and_ninja.outputs.cmake_dir }}${path_separator}$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtcreator_dir)

        set( qt_version ${{ steps.qt.outputs.qt_version }} )
        set( qt_url ${{ steps.qt.outputs.qt_base_url }} )
        set( qtc_version ${{ steps.qt_creator.outputs.qtc_version }} )
        set( qtc_url ${{ steps.qt_creator.outputs.qtc_base_url }} )

        configure_file( $ENV{GITHUB_WORKSPACE}/RELEASEINFO.md.in $ENV{GITHUB_WORKSPACE}/RELEASEINFO.md @ONLY )

        execute_process( COMMAND cmake -E make_directory "build" )

        execute_process(
          COMMAND cmake
            -G "Ninja"
            -DCMAKE_BUILD_TYPE=Release
            -DIDE_SOURCE_TREE=${qtcreator_dir}
            -DIDE_BUILD_TREE=${qtcreator_dir}
            ..

          RESULT_VARIABLE result
          WORKING_DIRECTORY build
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
            set(path_separator ";")
        endif()

        set(ENV{PATH} "${{ steps.cmake_and_ninja.outputs.cmake_dir }}${path_separator}$ENV{GITHUB_WORKSPACE}${path_separator}${{ steps.qt.outputs.qt_dir }}/bin/${path_separator}$ENV{PATH}")

        if ("${{ runner.os }}" STREQUAL "Windows")
        else()
          set(ENV{LD_LIBRARY_PATH} "qtcreator/lib/Qt/lib:$ENV{LD_LIBRARY_PATH}")
          set(ENV{QT_QPA_PLATFORM} "minimal" )
        endif()

        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ninja
          RESULT_VARIABLE result
          WORKING_DIRECTORY build
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status of ninja")
        endif()
        
        # install plugin dependencies for deployment
        execute_process(
          COMMAND ${CMAKE_COMMAND} -E env "DESTDIR=$ENV{GITHUB_WORKSPACE}/build/install" ninja install
          RESULT_VARIABLE result
          WORKING_DIRECTORY build
        )
        
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status of ninja install")
        endif()

        execute_process(
          COMMAND ${CMAKE_COMMAND} -E copy "$ENV{GITHUB_WORKSPACE}/RELEASEINFO.md" "$ENV{GITHUB_WORKSPACE}/build/install/qtc-sphinx-plugin-dependencies.md"
        )

        #message("start running tests")

        #execute_process(
        #  COMMAND ctest --output-on-failure
        #  RESULT_VARIABLE result
        #  WORKING_DIRECTORY build
        #)

        #if (NOT result EQUAL 0)
        #  message(FATAL_ERROR "error: Test for plugin failed!!\n${result}")
        #endif()
        
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/$ENV{PLUGIN_NAME}-$ENV{QT_CREATOR_VERSION}-${{ matrix.config.artifact }}" artifact)
        
        message("start compressing artifact to ${artifact}")

        execute_process(COMMAND
          ${CMAKE_COMMAND} -E tar cvf ${artifact} --format=zip .
          WORKING_DIRECTORY $ENV{GITHUB_WORKSPACE}/build/install
        )

    - uses: actions/upload-artifact@v2
      id: upload_artifact
      with:
        name: ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        path: |
            ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: ${{ github.workspace }}/RELEASENOTES.md
        draft: false
        prerelease: false

  publish:
    if: contains(github.ref, 'tags/v')

    name: Release ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        asset_name: ${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}
        asset_content_type: application/zip
